{% extends request.ajax ? "layout_blank.html.twig" : "layout_default.html.twig" %}

{% block meta_title %}{{ 'Enom Tools'|trans }}{% endblock %}

{% set active_menu = 'Enom Tools' %}

{% block content %}
<div class="card">
    <div class="card-header">
        <h3 class="card-title">Enom TLD importer</h3>
    </div>
    <div class="alert alert-danger d-none" role="alert" id="error-message">
    
    </div>
    <!-- First card -->
    <div class="card-body">

        <div class="row mb-3">
            <div class="col-md-6 col-lg-4">
                <div class="input-group">
                    <input type="text" class="form-control" id="searchInput" placeholder="Search TLDs">
                </div>
            </div>
        </div>
        
        <div class="form-check form-check-inline mb-3">
            <input class="form-check-input" type="checkbox" id="activation">
            <label class="form-check-label" for="activation">Activate TLDs on import</label>
        </div>
        <div class="form-check form-check-inline mb-3">
            <input class="form-check-input" type="checkbox" id="updateExistingTld">
            <label class="form-check-label" for="updateExistingTld">Update Existing TLDs</label>
        </div>

        <div class="mt-3">
            <button type="button" id="importButton" class="btn btn-primary">Import 0 TLDs</button>
        </div>
        
        <div class="mt-3">
            <div class="table-responsive mt-3">
                <div class="d-flex justify-content-center">
                    <ul class="pagination">
                        <li class="page-item">
                            <a id="prev-page" class="page-link" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <div id="page-numbers" class="d-flex"></div>
                        <li class="page-item">
                            <a id="next-page" class="page-link" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </div>
                <table class="table table-striped  text-center">
                    <thead>
                        <tr>
                            <th scope="col">
                                <input type="checkbox" id="select-all">
                            </th>
                            <th scope="col">
                                <span role="button" onclick="sortTLD(event, 'tld')">
                                    TLD <svg class="icon"></svg>
                                </span>
                            </th>
                            <th scope="col">
                                <span role="button" onclick="sortTLD(event, 'exitingTLD')">
                                    Existing TLD <svg class="icon"></svg>
                                </span>
                            </th>
                            <th scope="col">Reg Period</th>
                            <th scope="col">Register</th>
                            <th scope="col">Renew</th>
                            <th scope="col">Transfer</th>
                        </tr>
                    </thead>
                    <tbody id="table-content">
                    
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    //main
    let allTlds = [];
    let currentTlds = [];
    const activation = document.getElementById('activation');
    const updateExistingTldCheckbox = document.getElementById('updateExistingTld');
    let importButton = document.getElementById("importButton");
    let selectAllCheckbox = document.getElementById('select-all');
    let importedTld = {};
    const existingTld = {};
    const rowsPerPage = 100;
    const maxPagesToShow = 5;
    let currentPage = 1;
    let totalPages = 0;

    const searchInput = document.getElementById("searchInput");
    const errorMessage = document.getElementById("error-message");

    let currentSortDirection = "";
    let currentSortField = "";



    async function main(){
        try{
            allTlds = await getAllTldData();
        }catch(e){
            if (e.message != undefined){
                errorMessage.innerText = e.message;
                errorMessage.classList.remove('d-none');
            }
            console.error(e);
        }
        updateExistingTld();
        searchTLD("");
    }

    document.addEventListener('DOMContentLoaded', async function() {
        await main();

        searchInput.addEventListener('input', function() {
            let searchText = searchInput.value;
            searchTLD(searchText);
        });
    
        selectAllCheckbox.addEventListener('change', function() {
            let rowCheckboxes = document.querySelectorAll('.row-checkbox');
            for (let checkbox of rowCheckboxes) {
                checkbox.checked = this.checked;
                let tld = checkbox.dataset.tld;
                let duration = checkbox.dataset.duration;
                let registerprice = checkbox.dataset.registerprice;
                let renewprice = checkbox.dataset.renewprice;
                let transferprice = checkbox.dataset.transferprice;
                let registerenabled = checkbox.dataset.registerenabled;
                let transferenabled = checkbox.dataset.transferenabled;
                let minperiod = checkbox.dataset.minperiod;
                
                if (this.checked){
                    importedTld[tld] = {
                        duration,
                        registerprice,
                        renewprice,
                        transferprice,
                        registerenabled,
                        transferenabled,
                        minperiod
                    };
                }else{
                    delete importedTld[tld];
                }
            }
            updateCheckboxCount();
        });

        importButton.addEventListener('click', async ()=>{
            //disable the importButton to avoid spams until the request is over
            importButton.disabled = true;


            let importTldsArr = Object.keys(importedTld);
            if (importTldsArr.length == 0){
                FOSSBilling.message("No TLD selected");
                //enable the importButton
                importButton.disabled = false;
                return;
            }
            //add the activation value to newly imported TLDs
            importTldsArr.forEach(tld => {
                if (existingTld[tld] == undefined){
                    importedTld[tld]["activation"] = activation.checked;
                }
            });

            //merge the existing tld details with the imported ones, so the existing TLDs will always be updated when pressing import
            let submitTlds = {};
            if (updateExistingTldCheckbox.checked){
                dataTldObject = {};
                currentTlds.forEach(tld => {
                    if (existingTld[tld.tld] != undefined){
                        dataTldObject[tld.tld] = {
                            duration : tld.duration,
                            registerprice : tld.registerprice,
                            renewprice : tld.renewprice,
                            transferprice : tld.transferprice,
                            registerenabled : tld.registerenabled,
                            transferenabled : tld.transferenabled,
                            minperiod : tld.minperiod
                        };
                    }
                });
                submitTlds = {...importedTld, ...dataTldObject};
            }else{
                submitTlds = importedTld;
            }


            let response = await submitImportTlds(submitTlds);
            if (response){
                location.reload();
            }else{
                FOSSBilling.message("Something went wrong.");
            }

            //enable the importButton
            importButton.disabled = false;
        })

        document.getElementById('prev-page').addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                displayPage(currentPage);
            }
        });

        document.getElementById('next-page').addEventListener('click', () => {
            if ((currentPage * rowsPerPage) < currentTlds.length) {
                currentPage++;
                displayPage(currentPage);
            }
        });
    });

    async function getAllTldData(){
        return await new Promise((resolve,reject) => {
            API.admin.post('enomtools/get_all_tlds', 
                {},
                (result) => resolve(result),
                (result) => reject(result)
            )
        });
    }

    function updateExistingTld(){
        let existingTldArray = {{TLDExist|json_encode|raw}};
        existingTldArray.forEach(tldData => {
            existingTld[tldData.tld] = tldData;
        });
        //update the TLD data to include the existing value (mainly used for sorting)
        allTlds.forEach(tldData => {
            if (existingTld[tldData.tld]){
                tldData["exitingTLD"] = 1;
            }else{
                tldData["exitingTLD"] = 0;
            }
        })
    }

    function searchTLD(searchString){
        let lowerCaseSearchString = searchString.toLowerCase();
        currentTlds = [];

        allTlds.forEach(tld => {
            if (tld["tld"].toLowerCase().includes(lowerCaseSearchString)) {
                currentTlds.push(tld);
            }
        });
        totalPages = Math.ceil(currentTlds.length / rowsPerPage);
        currentPage = 1;
        displayPage(currentPage);
    }

    function sortTLD(event, field) {
        if (currentSortField === field) {
            currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            currentSortField = field;
            currentSortDirection = 'asc';
        }

        currentTlds.sort((a, b) => {
            let valueA = a[field];
            let valueB = b[field];
            if (!isNaN(valueA) && !isNaN(valueB)) {
                valueA = parseFloat(valueA);
                valueB = parseFloat(valueB);
            }
            if (typeof valueA === 'string' && typeof valueB === 'string') {
                return currentSortDirection === 'asc' ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);
            } else if (typeof valueA === 'number' && typeof valueB === 'number') {
                return currentSortDirection === 'asc' ? valueA - valueB : valueB - valueA;
            } else {
                return 0;
            }
        });

        currentPage = 1;
        updateSortIcon(event, currentSortDirection);
        displayPage(currentPage);
    }
    
    function updateSortIcon(event, direction){
        //remove the sort icon from the active column
        document.querySelectorAll('.active-icon').forEach(iconSvg => {
            iconSvg.innerHTML = '';
            iconSvg.classList.remove('active-icon');
        });
        
        //add the new sort icon
        let target = event.target.closest('span');
        let svg = target.querySelector('svg');
        svg.classList.add('active-icon');


        if (direction == 'asc' && svg != null){
            svg.innerHTML = `<path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M12 21C11.4477 21 11 20.5523 11 20V6.41421L5.70711 11.7071C5.31658 12.0976 4.68342 12.0976 4.29289 11.7071C3.90237 11.3166 3.90237 10.6834 4.29289 10.2929L11.2929 3.29289C11.6834 2.90237 12.3166 2.90237 12.7071 3.29289L19.7071 10.2929C20.0976 10.6834 20.0976 11.3166 19.7071 11.7071C19.3166 12.0976 18.6834 12.0976 18.2929 11.7071L13 6.41421V20C13 20.5523 12.5523 21 12 21Z"></path>`;
        }else if (direction == 'desc' && svg != null){
            svg.innerHTML = `<path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M12 3C12.5523 3 13 3.44772 13 4V17.5858L18.2929 12.2929C18.6834 11.9024 19.3166 11.9024 19.7071 12.2929C20.0976 12.6834 20.0976 13.3166 19.7071 13.7071L12.7071 20.7071C12.3166 21.0976 11.6834 21.0976 11.2929 20.7071L4.29289 13.7071C3.90237 13.3166 3.90237 12.6834 4.29289 12.2929C4.68342 11.9024 5.31658 11.9024 5.70711 12.2929L11 17.5858V4C11 3.44772 11.4477 3 12 3Z"></path>`;
        }
    }


    async function submitImportTlds(TldsObject){
        return await new Promise((resolve,reject) => {
            API.admin.post('enomtools/post_submit_TLDs', 
                TldsObject,
                (result) => resolve(result),
                (result) => reject(result)
            )
        });
    }

    //table checkboxes

    function updateCheckboxes(){
        const rowCheckboxes = document.querySelectorAll('.row-checkbox');

        rowCheckboxes.forEach(checkbox => {
            let tld = checkbox.dataset.tld;
            let duration = checkbox.dataset.duration;
            let registerprice = checkbox.dataset.registerprice;
            let renewprice = checkbox.dataset.renewprice;
            let transferprice = checkbox.dataset.transferprice;
            let registerenabled = checkbox.dataset.registerenabled;
            let transferenabled = checkbox.dataset.transferenabled;
            let minperiod = checkbox.dataset.minperiod;
            if (tld in importedTld){
                checkbox.checked = true;
            }
            checkbox.addEventListener('change', (ev)=>{
                if (ev.target.checked){
                    importedTld[tld] = {
                        duration,
                        registerprice,
                        renewprice,
                        transferprice,
                        registerenabled,
                        transferenabled,
                        minperiod
                    };
                }else{
                    delete importedTld[tld];
                }
                updateCheckboxCount();
            });
        });
    }
    
    function updateCheckboxCount() {
        let checkedNbr = Object.keys(importedTld).length;
        importButton.textContent = `Import ${checkedNbr} TLDs`;
    }


    //pagination


    function displayPage(page) {
        const start = (page - 1) * rowsPerPage;
        const end = start + rowsPerPage;
        const pageData = currentTlds.slice(start, end);

        const tableContent = document.getElementById('table-content');
        tableContent.innerHTML = '';

        pageData.forEach(value => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td><input type="checkbox" class="row-checkbox" 
                    data-tld="${value.tld}"
                    data-duration="${value.duration}"
                    data-registerprice="${value.registerprice}"
                    data-renewprice="${value.renewprice}"
                    data-transferprice="${value.transferprice}"
                    data-registerenabled="${value.registerenabled}"
                    data-transferenabled="${value.transferenabled}"
                    data-minperiod="${value.minperiod}"
                    "></td>
                <td>${value.tld}</td>
                <td>
                    ${ existingTld[value.tld] != undefined ? `
                    <svg class="icon text-success row-existing-tld"> 
                        <use xlink:href="#check"></use> 
                    </svg>
                    ` : ""}

                </td>
                <td>${value.duration} Year</td>
                <td>
                    $${value.registerprice}
                    ${ existingTld[value.tld] != undefined ? `
                    <small class="text-muted d-block">$${existingTld[value.tld]["price_registration"]}</small>
                    ` : ""}
                </td>
                <td>
                    $${value.renewprice}
                    ${ existingTld[value.tld] != undefined ? `
                    <small class="text-muted d-block">$${existingTld[value.tld]["price_renew"]}</small>
                    ` : ""}
                </td>
                <td>
                    $${value.transferprice}
                    ${ existingTld[value.tld] != undefined ? `
                    <small class="text-muted d-block">$${existingTld[value.tld]["price_transfer"]}</small>
                    ` : ""}
                </td>
            `;
            tableContent.appendChild(row);
        });

        const prevPageButton = document.getElementById('prev-page').parentElement;
        const nextPageButton = document.getElementById('next-page').parentElement;

        if (page === 1) {
            prevPageButton.classList.add('disabled');
        } else {
            prevPageButton.classList.remove('disabled');
        }

        if (page === totalPages) {
            nextPageButton.classList.add('disabled');
        } else {
            nextPageButton.classList.remove('disabled');
        }

        updatePageNumbers(page);

        //update the checkbox code for each row
        updateCheckboxes();
        selectAllCheckbox.checked = false;
    }

    function updatePageNumbers(currentPage) {
        const pageNumbers = document.getElementById('page-numbers');
        pageNumbers.innerHTML = '';

        let startPage = Math.max(currentPage - Math.floor(maxPagesToShow / 2), 1); // 1
        let endPage = startPage + maxPagesToShow - 1; // 6
        if (endPage > totalPages) {
            endPage = totalPages;
            startPage = Math.max(endPage - maxPagesToShow + 1, 1);
        }

        if (startPage > 1) {
            appendPageButton(1);
            if (startPage > 2) {
                appendEllipsis();
            }
        }

        for (let i = startPage; i <= endPage; i++) {
            appendPageButton(i, i === currentPage ? 'active' : '');
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                appendEllipsis();
            }
            appendPageButton(totalPages);
        }
    }

    function appendPageButton(pageNumber, className = '') {
        const pageItem = document.createElement('li');
        pageItem.className = `page-item ${className}`;
        const pageButton = document.createElement('button');
        pageButton.textContent = pageNumber;
        pageButton.className = 'page-link';
        pageButton.addEventListener('click', () => {
            currentPage = pageNumber;
            displayPage(currentPage);
        });
        pageItem.appendChild(pageButton);
        document.getElementById('page-numbers').appendChild(pageItem);
    }

    function appendEllipsis() {
        const ellipsisItem = document.createElement('li');
        ellipsisItem.className = 'page-item disabled';
        const ellipsis = document.createElement('span');
        ellipsis.textContent = '...';
        ellipsis.className = 'page-link';
        ellipsisItem.appendChild(ellipsis);
        document.getElementById('page-numbers').appendChild(ellipsisItem);
    }




</script>

{% endblock %}
