{% import 'macro_functions.html.twig' as mf %}

{% set service = admin.order_service({ "id": order.id }) %}

<div class="card-body overflow-auto">
    <h3>{{ 'Details'|trans }}</h3>
    <table class="table card-table table-vcenter table-striped text-nowrap">
        <tbody>
            <tr>
                <td class="text-end">{{ 'API Key'|trans }}:</td>
                <td>{{ service.api_key }}</td>
            </tr>
        </tbody>
    </table>
</div>

<div class="card-footer text-center">
    {{ order_actions }}
    <a class="btn btn-primary api-link"
        href="{{ 'api/admin/serviceapikey/reset'|link({ 'id': service.id, 'CSRFToken': CSRFToken }) }}"
        data-api-confirm="{{ 'Are you sure?'|trans }}"
        data-api-reload="1">
        <svg class="icon" width="24" height="24">
            <use xlink:href="#refresh" />
        </svg>
        <span>{{ 'Reset API key'|trans }}</span>
    </a>
</div>

<div class="card-body">
    <h2>{{ 'API key configuration'|trans }}</h2>

    <form action="{{ 'api/admin/serviceapikey/update'|link }}" method="post" class="api-form" data-api-msg="{{ 'API key updated'|trans }}">
        <input type="hidden" name="CSRFToken" value="{{ CSRFToken }}"/>
        <div class="mb-3 row">
            <label class="form-label col-3 col-form-label">{{ 'API key'|trans }}:</label>
            <div class="col">
                <textarea type="text" class="form-control" name="api_key" required readonly>{{ request.api_key|default(service.api_key) }}</textarea>
            </div>
        </div>

        <div class="mb-3 row">
            <h2>{{ 'Custom Parameters'|trans }}</h2>
            <p>{{ 'Here, you have the option to include custom parameters that can be requested from the API. This is particularly useful if you want to set specific limits for API keys. Your application can connect to the FOSSBilling API and retrieve the custom parameters you have defined for an API key.'|trans }}</p>
            <P>{{ 'FOSSBilling will remove the "custom_" prefix from the value name when requesting them from the API. IE: custom_monthlyLimit will be named monthlyLimit when fetched through the API.'|trans}}
            <div class="col" id="customParameters">
                <span class="btn btn-primary" onclick="addNewField()">{{ 'Add new field'|trans }}</span>
                {% for key, value in service.config %}
                    {% if key starts with 'custom_' %}
                        <div class="field-container row" id="{{key}}">
                            <label class="form-label col-3 col-form-label">{{key}}:</label>
                            <div class="col d-flex align-items-center">
                                <input type="text" class="form-control" value="{{value}}" name="config[{{key}}]"/><span
                                class="btn btn-primary ml-2" onclick='deleteField("{{key}}")'>Delete</span>
                            </div>
                        </div>
                    {% endif %}
                  {% endfor %}                  
            </div>
        </div>

        <input type="hidden" name="id" value="{{ service.id }}">
        <input type="submit" value="{{ 'Update'|trans }}" class="btn btn-primary w-100">
    </form>
    <hr>
</div>

<script> 
    function addNewField() {
        Modals.create({
            type: 'prompt',
            title: 'New field',
            label: 'Give the new field a name',
            value: 'monthlyLimit',
            promptConfirmButton: 'Create',
            promptConfirmCallback: function (name) {
                // We use camel case to ensure it'll be programming-friendly & append 'custom_' to the start of it so they are easily identifiable as custom parameters.
                name = 'custom_' + toCamelCase(name);
                var container = document.getElementById('customParameters');
    
                // Create the container div
                var fieldContainer = document.createElement('div');
                fieldContainer.classList.add('field-container', 'row');
                fieldContainer.setAttribute('id', name);
    
                // Create the label element
                var label = document.createElement('label');
                label.classList.add('form-label', 'col-3', 'col-form-label');
                label.textContent = name + ':';
    
                // Create the div container for the input and button
                var div = document.createElement('div');
                div.classList.add('col', 'd-flex', 'align-items-center');
    
                // Create the input element
                var input = document.createElement('input');
                input.setAttribute('type', 'text');
                input.classList.add('form-control');
                input.setAttribute('name', 'config[' + name + ']');
    
                // Create the button element
                var button = document.createElement('span');
                button.classList.add('btn', 'btn-primary', 'ml-2');
                button.textContent = 'Delete';
                button.setAttribute('onclick', 'deleteField("' + name + '")');
    
                // Append elements
                div.appendChild(input);
                div.appendChild(button);
    
                // Append the label and div to the container div
                fieldContainer.appendChild(label);
                fieldContainer.appendChild(div);
    
                // Append the container div to the main container
                container.appendChild(fieldContainer);
            }
        });
    }
    
    function deleteField(id){
        const element = document.getElementById(id);
        element.remove();
    }
    
    function toCamelCase(str) {
        str = str.replace(/[^a-zA-Z0-9]/g, ' ');
        var words = str.split(' ');
        
        // Capitalize the first letter of each word except the first word
        for (var i = 1; i < words.length; i++) {
            words[i] = words[i].charAt(0).toUpperCase() + words[i].slice(1);
        }
    
        return words.join('');
    }
</script>
